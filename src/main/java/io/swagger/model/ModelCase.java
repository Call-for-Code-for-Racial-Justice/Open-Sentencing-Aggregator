/*
 * Outcarcerate
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.model.Charge;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;

/**
 * ModelCase
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2020-08-12T21:38:30.799+02:00")
public class ModelCase   {
  @JsonProperty("id")
  private String id = null;

  @JsonProperty("rev")
  private String rev = null;

  @JsonProperty("client_id")
  private String clientId = null;

  @JsonProperty("crime_description")
  private String crimeDescription = null;

  @JsonProperty("reasoning_for_charges")
  private String reasoningForCharges = null;

  @JsonProperty("possible_charges")
  private List<Charge> possibleCharges = new ArrayList<Charge>();

  /**
   * Gets or Sets circuit
   */
  public enum CircuitEnum {
    DC_CIRCUIT("DC Circuit"),
    
    _1ST_CIRCUIT("1st Circuit"),
    
    _2ND_CIRCUIT("2nd Circuit"),
    
    _3RD_CIRCUIT("3rd Circuit"),
    
    _4TH_CIRCUIT("4th Circuit"),
    
    _5TH_CIRCUIT("5th Circuit"),
    
    _6TH_CIRCUIT("6th Circuit"),
    
    _7TH_CIRCUIT("7th Circuit"),
    
    _8TH_CIRCUIT("8th Circuit"),
    
    _9TH_CIRCUIT("9th Circuit"),
    
    _10TH_CIRCUIT("10th Circuit"),
    
    _11TH_CIRCUIT("11th Circuit");

    private String value;

    CircuitEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CircuitEnum fromValue(String text) {
      for (CircuitEnum b : CircuitEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("circuit")
  private CircuitEnum circuit = null;

  @JsonProperty("state")
  private String state = null;

  @JsonProperty("district")
  private String district = null;

  public ModelCase id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   **/
  @JsonProperty("id")
  @ApiModelProperty(value = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ModelCase rev(String rev) {
    this.rev = rev;
    return this;
  }

  /**
   * Get rev
   * @return rev
   **/
  @JsonProperty("rev")
  @ApiModelProperty(value = "")
  public String getRev() {
    return rev;
  }

  public void setRev(String rev) {
    this.rev = rev;
  }

  public ModelCase clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Get clientId
   * @return clientId
   **/
  @JsonProperty("client_id")
  @ApiModelProperty(value = "")
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }

  public ModelCase crimeDescription(String crimeDescription) {
    this.crimeDescription = crimeDescription;
    return this;
  }

  /**
   * Get crimeDescription
   * @return crimeDescription
   **/
  @JsonProperty("crime_description")
  @ApiModelProperty(required = true, value = "")
  @NotNull
  public String getCrimeDescription() {
    return crimeDescription;
  }

  public void setCrimeDescription(String crimeDescription) {
    this.crimeDescription = crimeDescription;
  }

  public ModelCase reasoningForCharges(String reasoningForCharges) {
    this.reasoningForCharges = reasoningForCharges;
    return this;
  }

  /**
   * Get reasoningForCharges
   * @return reasoningForCharges
   **/
  @JsonProperty("reasoning_for_charges")
  @ApiModelProperty(required = true, value = "")
  @NotNull
  public String getReasoningForCharges() {
    return reasoningForCharges;
  }

  public void setReasoningForCharges(String reasoningForCharges) {
    this.reasoningForCharges = reasoningForCharges;
  }

  public ModelCase possibleCharges(List<Charge> possibleCharges) {
    this.possibleCharges = possibleCharges;
    return this;
  }

  public ModelCase addPossibleChargesItem(Charge possibleChargesItem) {
    this.possibleCharges.add(possibleChargesItem);
    return this;
  }

  /**
   * Get possibleCharges
   * @return possibleCharges
   **/
  @JsonProperty("possible_charges")
  @ApiModelProperty(required = true, value = "")
  @NotNull
  public List<Charge> getPossibleCharges() {
    return possibleCharges;
  }

  public void setPossibleCharges(List<Charge> possibleCharges) {
    this.possibleCharges = possibleCharges;
  }

  public ModelCase circuit(CircuitEnum circuit) {
    this.circuit = circuit;
    return this;
  }

  /**
   * Get circuit
   * @return circuit
   **/
  @JsonProperty("circuit")
  @ApiModelProperty(value = "")
  public CircuitEnum getCircuit() {
    return circuit;
  }

  public void setCircuit(CircuitEnum circuit) {
    this.circuit = circuit;
  }

  public ModelCase state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   **/
  @JsonProperty("state")
  @ApiModelProperty(value = "")
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }

  public ModelCase district(String district) {
    this.district = district;
    return this;
  }

  /**
   * Get district
   * @return district
   **/
  @JsonProperty("district")
  @ApiModelProperty(value = "")
  public String getDistrict() {
    return district;
  }

  public void setDistrict(String district) {
    this.district = district;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelCase _case = (ModelCase) o;
    return Objects.equals(this.id, _case.id) &&
        Objects.equals(this.rev, _case.rev) &&
        Objects.equals(this.clientId, _case.clientId) &&
        Objects.equals(this.crimeDescription, _case.crimeDescription) &&
        Objects.equals(this.reasoningForCharges, _case.reasoningForCharges) &&
        Objects.equals(this.possibleCharges, _case.possibleCharges) &&
        Objects.equals(this.circuit, _case.circuit) &&
        Objects.equals(this.state, _case.state) &&
        Objects.equals(this.district, _case.district);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, rev, clientId, crimeDescription, reasoningForCharges, possibleCharges, circuit, state, district);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelCase {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    rev: ").append(toIndentedString(rev)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    crimeDescription: ").append(toIndentedString(crimeDescription)).append("\n");
    sb.append("    reasoningForCharges: ").append(toIndentedString(reasoningForCharges)).append("\n");
    sb.append("    possibleCharges: ").append(toIndentedString(possibleCharges)).append("\n");
    sb.append("    circuit: ").append(toIndentedString(circuit)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    district: ").append(toIndentedString(district)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

